{"version":3,"sources":["logo.svg","api/index.js","reducers/customers.js","constants/index.js","reducers/index.js","constants/permissions.js","store/index.js","components/AppHeader.js","components/AppFrame.js","components/CustomersActions.js","containers/HomeContainer.js","components/CustomerListItem.js","helpers/accessControl.js","components/CustomersList.js","api/urls.js","actions/fetchCustomers.js","selectors/customers.js","containers/CustomersContainer.js","helpers/setPropsAsInitial.js","components/CustomerEdit.js","components/CustomerData.js","actions/updateCustomer.js","actions/deleteCustomer.js","containers/CustomerContainer.js","actions/insertCustomer.js","containers/NewCustomerContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","url","customers","handleActions","_handleActions","Object","defineProperty","state","action","toConsumableArray","payload","newCustomer","reduce","acc","customer","id","concat","filter","c","combineReducers","form","user","permissions","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","promiseMiddleware","AppHeader","props","react_default","a","createElement","className","title","AppFrame","_ref","header","body","footer","components_AppHeader","CustomersActions","children","HomeContainer","handleOnClick","_this","history","push","components_AppFrame","src","logo","alt","components_CustomersActions","onClick","this","Component","withRouter","CustomerListItem","name","editAction","delAction","urlPath","dni","react_router_dom","to","accessControl","permissionsRequired","WrappepComponent","SecuredControl","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","every","indexOf","connect","map","components_CustomerListItem","urlCustomers","fetchCustomers","createAction","fetch","then","v","json","getCustomers","getCustomerByDni","createSelector","find","CustomersContainer","handleOnBack","goBack","handleAddNew","renderBody","components_CustomersList","length","defaultProps","WrappedComponent","mapDispatchToProps","CustomerEdit","renderField","input","meta","type","label","withFocus","htmlFor","assign","ref","txt","touched","error","isNumber","isNaN","Number","toUpperCase","toNumber","focus","_this$props","handleSubmit","submitting","onBack","pristine","submitSucceeded","onSubmit","Field","component","parse","validate","disabled","react_router","when","message","CustomerEditForm","reduxForm","values","age","_class","initialValues","enableReinitialize","isDelele","onDelete","updateCustomer","obj","method","JSON","stringify","headers","Headers","Content-type","r","Promise","reject","validation","apiPut","deleteCustomer","apiDelete","CustomerContainer","handleOnDelete","SubmissionError","handleOnSubmitSuccess","handleOnSubmit","renderCustomerControl","isEdit","isDelelete","CustomerControl","CustomerData","onSubmitSuccess","path","match","_ref2","insertCustomer","NewCustomerContainer","components_CustomerEdit","App","basename","process","exact","render","containers_CustomerContainer","params","Boolean","location","hostname","rootComponent","es","src_App_0","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f0782f9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const apiGet = url => () => fetch(url).then(v => v.json());\n\nexport const apiPut = (url, id, obj) => () => \n    fetch(`${url}/${id}`, \n        { \n            method: 'PUT',\n            body: JSON.stringify(obj),\n            headers: new Headers({ 'Content-type': 'application/json' })\n        }\n    )\n    .then(v => v.json())\n    .then(r => {\n        if (r.error) return Promise.reject(r.validation)\n        return r;\n    });\n\nexport const apiPost = (url, obj) => () => \n    fetch(`${url}`, \n    { \n        method: 'POST',\n        body: JSON.stringify(obj),\n        headers: new Headers({ 'Content-type': 'application/json' })\n    }\n    )\n    .then(v => v.json())\n    .then(r => {\n        if (r.error) return Promise.reject(r.validation)\n        return r;\n    });\n\nexport const apiDelete = (url, id) => () => \n    fetch(`${url}/${id}`, \n    { \n        method: 'DELETE',\n        headers: new Headers({ 'Content-type': 'application/json' })\n    }\n    )\n    .then(v => v.json())\n    .then(r => {\n        if (r.error) return Promise.reject(r.validation)\n        return id;\n    });","import { handleActions } from 'redux-actions';\nimport { FETCH_CUSTOMERS, UPDATE_CUSTOMER, INSERT_CUSTOMER, DELETE_CUSTOMER } from '../constants';\n\nexport const customers = handleActions({\n    [FETCH_CUSTOMERS]: (state, action) => [...action.payload],\n    [UPDATE_CUSTOMER]: (state, action) => {\n        const newCustomer = action.payload;\n        const newCustomers = state.reduce((acc, customer) => {\n            if (customer.id === newCustomer.id){\n                return [...acc, newCustomer];\n            }else{\n                return [...acc, customer];\n            }\n        }, []);\n        return newCustomers;\n    },\n    [INSERT_CUSTOMER]: (state, action) => [...state, action.payload],\n    [DELETE_CUSTOMER]: (state, action) => state.filter(c => c.id !== action.payload),\n\n}, []);","export const FETCH_CUSTOMERS = 'FETCH_CUSTOMERS';\nexport const UPDATE_CUSTOMER = 'UPDATE_CUSTOMER';\nexport const INSERT_CUSTOMER = 'INSERT_CUSTOMER';\nexport const DELETE_CUSTOMER = 'DELETE_CUSTOMER';","import { combineReducers } from 'redux';\nimport { customers } from './customers';\nimport { reducer as form } from 'redux-form';\nimport { CUSTOMER_VIEW, CUSTOMER_LIST, CUSTOMER_EDIT } from './../constants/permissions';\n\nconst user = (state, action) => (\n    {\n        permissions: [CUSTOMER_LIST, CUSTOMER_VIEW, CUSTOMER_EDIT]\n    }\n);\n\nexport default combineReducers({\n    customers,\n    form,\n    user,\n})","export const CUSTOMER_LIST = 'CUSTOMER_LIST';\nexport const CUSTOMER_EDIT = 'CUSTOMER_EDIT';\nexport const CUSTOMER_VIEW = 'CUSTOMER_VIEW';","import { createStore, compose, applyMiddleware } from 'redux';\nimport promiseMiddleware from 'redux-promise';\nimport reducers from './../reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nexport const store = createStore(reducers, {}, composeEnhancers(applyMiddleware(promiseMiddleware)));","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst AppHeader = props => {\n    return (\n        <div className=\"app-header\">\n            <h1>{props.title}</h1>\n        </div>\n    );\n};\n\nAppHeader.propTypes = {\n    title: PropTypes.string.isRequired,\n};\n\nexport default AppHeader;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AppHeader from './AppHeader';\n\nconst AppFrame = ({ header, body, footer }) => {\n    return (\n        <div className=\"app-frame\">\n            <AppHeader title={header} />\n            <div>{body}</div>\n            <div><p>Aplicación Simple de Clientes</p></div>\n        </div>\n    );\n};\n\nAppFrame.propTypes = {\n    header: PropTypes.string.isRequired,\n    body: PropTypes.element.isRequired,\n};\n\nexport default AppFrame;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CustomersActions = ({ children }) => {\n    return (\n        <div className=\"customers-actions\">\n            <div>{children}</div>\n        </div>\n    );\n};\n\nCustomersActions.propTypes = {\n    children: PropTypes.node.isRequired,\n};\n\nexport default CustomersActions;","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport logo from './../logo.svg';\nimport './../App.css';\nimport AppFrame from '../components/AppFrame';\nimport CustomersActions from '../components/CustomersActions';\n\nclass HomeContainer extends Component {\n\n    handleOnClick = () => {\n        this.props.history.push(\"/customers\")\n    }\n\n    render(){\n        return (\n            <AppFrame \n                header='Inicio'\n                body={\n                    <div>\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                        <CustomersActions>\n                            <button onClick={this.handleOnClick} >Listado de clientes</button>\n                        </CustomersActions>        \n                    </div>  \n                } />\n        );\n    }\n};\n\nHomeContainer.propTypes = {};\n\nexport default withRouter(HomeContainer);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nconst CustomerListItem = ({ name, editAction, delAction, urlPath, dni }) => {\n    return (\n        <div className=\"customer-list-item\">\n            <div className=\"field\">\n                <Link to={`${urlPath}${dni}`}>{name}</Link>\n            </div>\n            <div className=\"field\">\n                <Link to={`${urlPath}${dni}/edit`}>{editAction}</Link>\n            </div>\n            <div className=\"field\">\n                <Link to={`${urlPath}${dni}/del`}>{delAction}</Link>\n            </div>\n        </div>\n    );\n};\n\nCustomerListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    editAction: PropTypes.string.isRequired,\n    delAction: PropTypes.string.isRequired,\n    urlPath: PropTypes.string.isRequired,\n    dni: PropTypes.string.isRequired,\n};\n\nexport default CustomerListItem;","\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nexport const accessControl = permissionsRequired => WrappepComponent => {\n    const SecuredControl = class extends Component {\n        render() {\n            const { permissions } = this.props.user;\n\n            const isAllow = permissionsRequired.every(p => permissions.indexOf(p) >= 0);\n\n            if (!isAllow) {\n                return (<div><i>No tiene permisos de acceso</i></div>);\n            }\n            return <WrappepComponent {...this.props} />;\n        }\n    }\n    return connect(state => ({ user: state.user }))(SecuredControl);\n}\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CustomerListItem from './CustomerListItem';\nimport { CUSTOMER_LIST } from '../constants/permissions';\nimport { accessControl } from './../helpers/accessControl';\n\nconst CustomersList = ({ customers, urlPath }) => {\n    return (\n        <div className=\"customers-list\">\n            {\n                customers.map(c => \n                    <CustomerListItem \n                        key={c.dni} \n                        name={c.name} \n                        editAction={'Editar'}\n                        delAction={'Eliminar'}\n                        urlPath={urlPath}\n                        dni={c.dni}\n                        />)\n            }\n        </div>\n    );\n};\n\nCustomersList.propTypes = {\n    customers: PropTypes.array.isRequired,\n    urlPath: PropTypes.string.isRequired,\n};\n\nexport default accessControl([CUSTOMER_LIST])(CustomersList); ","const urlBase = 'http://localhost:3001/';\n\nexport const urlCustomers = `${urlBase}customers`;","import { FETCH_CUSTOMERS } from './../constants';\nimport { createAction } from 'redux-actions';\nimport { apiGet } from './../api';\nimport { urlCustomers } from './../api/urls';\n\nexport const fetchCustomers = createAction(FETCH_CUSTOMERS, apiGet(urlCustomers));","import { createSelector } from 'reselect';\nexport const getCustomers = state => state.customers;\n\nexport const getCustomerByDni = createSelector(\n    (state, props)  => state.customers.find(c => c.dni === props.dni),\n    customer => customer\n)","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport AppFrame from '../components/AppFrame';\nimport CustomersList from '../components/CustomersList';\nimport CustomersActions from '../components/CustomersActions';\nimport { fetchCustomers } from '../actions/fetchCustomers';\nimport { getCustomers } from '../selectors/customers'\n\nclass CustomersContainer extends Component {\n\n    componentDidMount() {\n        if (this.props.customers.length === 0){\n            this.props.fetchCustomers()\n        }\n    }\n\n    handleOnBack = () => {\n        this.props.history.goBack()\n    }\n\n    handleAddNew = () => {\n        this.props.history.push(\"/customers/new\")\n    }\n\n    renderBody = customers => (\n        <div>\n            <CustomersList \n                customers={customers} \n                urlPath={\"/customers/\"}\n                />\n            <CustomersActions>\n                <button onClick={this.handleAddNew}>Nuevo Cliente</button>\n                <button onClick={this.handleOnBack}>Volver</button>\n            </CustomersActions>\n        </div>\n    )\n\n    render() {\n        return (\n            <div>\n                <AppFrame \n                    header={'Listado de clientes'}\n                    body={this.renderBody(this.props.customers)}\n                    />\n            </div>\n        )\n    }\n}\n\nCustomersContainer.propTypes = {\n    fetchCustomers: PropTypes.func.isRequired,\n    customers: PropTypes.array.isRequired,\n};\n\nCustomersContainer.defaultProps = {\n    customers: []\n};\n\nconst mapStateToProps = state => ({\n    customers: getCustomers(state)\n})\n\nconst mapDispatchToProps = { fetchCustomers }\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CustomersContainer));\n","import React, { Component } from 'react';\n\nexport const setPropsAsInitial = WrappedComponent => (\n    class extends Component {\n        render() {\n            return <WrappedComponent \n                        {...this.props} \n                        initialValues={this.props} \n                        enableReinitialize\n                        />;\n        }\n    }\n);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { reduxForm, Field } from 'redux-form';\nimport { setPropsAsInitial } from '../helpers/setPropsAsInitial';\nimport CustomersActions from '../components/CustomersActions';\nimport { Prompt } from 'react-router-dom';\nimport { CUSTOMER_EDIT } from '../constants/permissions';\nimport { accessControl } from './../helpers/accessControl';\n\nconst validate = values => {\n    const error = {};\n    if (!values.name){\n        error.name = \"Este campo es requerido\"\n    }\n    if (!values.dni){\n        error.dni = \"Este campo es requerido\"\n    }\n    if (!values.age){\n        error.age = \"Este campo es requerido\"\n    }\n    return error;\n};\n\nclass CustomerEdit extends Component {\n\n    componentDidMount() {\n        if (this.txt) {\n            this.txt.focus()\n        }\n    }\n    \n    renderField = ({ input, meta, type, label, withFocus, id }) => (\n        <div>\n            <label htmlFor={id}>{label}</label>\n            <input \n                id={id} \n                ref={withFocus && (txt => this.txt = txt)} \n                {...input} \n                type={!type ? \"text\" : type}\n                />\n            {meta.touched && meta.error && <span>{meta.error}</span>}\n        </div>\n    )\n    \n    // isRequired = value => (\n    //     !value && \"Este campo es requerido\"\n    // );\n    \n    isNumber = value => (\n        isNaN(Number(value)) && \"El campo debe ser un número\"\n    );\n    \n    toUpperCase = value => (\n        value && value.toUpperCase()\n    );\n    \n    toNumber = value => (\n        value && Number(value)\n    );\n    \n    // onlyGrow = (value, previousValue, values) => (\n    //     value && previousValue && value > previousValue ? value : previousValue\n    // );\n\n    render() {\n        const { handleSubmit, submitting, onBack, pristine, submitSucceeded } = this.props\n        return (\n            <div>\n                <h2>Datos del cliente</h2>\n                <form onSubmit={handleSubmit}>\n                    <Field \n                        withFocus\n                        id=\"name\"\n                        name=\"name\" \n                        component={this.renderField} \n                        type=\"text\"\n                        // validate={this.isRequired}\n                        label=\"Nombre:\"\n                        parse={this.toUpperCase}\n                        // format={this.toUpperCase}\n                        />\n                    <Field \n                        id=\"dni\"\n                        name=\"dni\" \n                        component={this.renderField} \n                        type=\"text\" \n                        // validate={this.isRequired}\n                        label=\"DNI:\"\n                        />\n                    <Field \n                        id=\"age\"\n                        name=\"age\" \n                        component={this.renderField} \n                        type=\"number\" \n                        // validate={[isRequired, isNumber]}\n                        validate={this.isNumber}\n                        label=\"Edad:\"\n                        parse={this.toNumber}\n                        // normalize={onlyGrow}\n                        />\n                    <CustomersActions>\n                        <button \n                            type=\"submit\" \n                            disabled={pristine || submitting}>\n                            Aceptar\n                        </button>\n                        <button \n                            type=\"button\" \n                            disabled={submitting} \n                            onClick={onBack}>\n                            Cancelar\n                        </button>\n                    </CustomersActions>\n                    <Prompt\n                        when={!pristine && !submitSucceeded}\n                        message=\"Se perderán los datos si continua\" />\n                </form>\n            </div>\n        );\n    }\n};\n\nCustomerEdit.propTypes = {\n    name: PropTypes.string,\n    dni: PropTypes.string,\n    age: PropTypes.number,\n    handleSubmit: PropTypes.func.isRequired,\n    submitting: PropTypes.bool.isRequired,\n    onBack: PropTypes.func.isRequired,\n};\n\nconst CustomerEditForm = reduxForm(\n    { \n        form: 'CustomerEdit',\n        validate\n    }\n)(CustomerEdit)\n\nexport default accessControl([CUSTOMER_EDIT])(setPropsAsInitial(CustomerEditForm)); ","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CustomersActions from '../components/CustomersActions';\nimport { CUSTOMER_VIEW } from '../constants/permissions';\nimport { accessControl } from './../helpers/accessControl';\n\nconst CustomerData = ({ id, name, dni, age, onBack, isDelele, onDelete }) => {\n    return (\n        <div>\n            <div className=\"customer-data\">\n                <h2>Datos del cliente</h2>\n                <div><strong>Nombre</strong><i>{name}</i></div>\n                <div><strong>DNI</strong><i>{dni}</i></div>\n                <div><strong>Edad</strong><i>{age}</i></div>\n            </div>\n            <CustomersActions>\n                <button type=\"button\" onClick={onBack}>Volver</button>\n                {isDelele && <button type=\"button\" onClick={() => {onDelete(id)}}>Eliminar</button>}\n            </CustomersActions>\n        </div>\n    );\n};\n\nCustomerData.propTypes = {\n    name: PropTypes.string,\n    dni: PropTypes.string,\n    age: PropTypes.number,\n    onBack: PropTypes.func.isRequired,\n    onDelete: PropTypes.func,\n};\n\nexport default accessControl([CUSTOMER_VIEW])(CustomerData); ","import { UPDATE_CUSTOMER } from './../constants';\nimport { createAction } from 'redux-actions';\nimport { apiPut } from './../api';\nimport { urlCustomers } from './../api/urls';\n\nexport const updateCustomer = createAction(UPDATE_CUSTOMER, \n    (id, customer) => apiPut(urlCustomers, id, customer)());","import { DELETE_CUSTOMER } from './../constants';\nimport { createAction } from 'redux-actions';\nimport { apiDelete } from './../api';\nimport { urlCustomers } from './../api/urls';\n\nexport const deleteCustomer = createAction(DELETE_CUSTOMER, \n    id => apiDelete(urlCustomers, id)());","import React, { Component } from 'react'\nimport PropTypes from 'prop-types';\nimport { withRouter, Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport AppFrame from '../components/AppFrame';\nimport { getCustomerByDni } from '../selectors/customers';\nimport CustomerEdit from '../components/CustomerEdit';\nimport CustomerData from '../components/CustomerData';\nimport { fetchCustomers } from '../actions/fetchCustomers';\nimport { updateCustomer } from '../actions/updateCustomer';\nimport { deleteCustomer } from '../actions/deleteCustomer';\nimport { SubmissionError } from 'redux-form';\n\nclass CustomerContainer extends Component {\n\n    componentDidMount() {\n        if (!this.props.customer) {\n            this.props.fetchCustomers()\n        }\n    }\n\n    handleOnDelete = id => {\n        return this.props.deleteCustomer(id).then(r => {\n            if (r.error){\n                throw new SubmissionError(r.payload)\n            } else {\n                this.props.history.goBack()\n            }\n        });\n    }\n\n    handleOnBack = () => {\n        this.props.history.goBack()\n    }\n\n    handleOnSubmitSuccess = () =>{\n        this.props.history.goBack()\n    }\n\n    handleOnSubmit = values => {\n        const { id } = values\n        return this.props.updateCustomer(id, values).then(r => {\n            if (r.error) throw new SubmissionError(r.payload)\n        });\n    }\n    \n    renderCustomerControl = (isEdit, isDelelete) => {\n        const CustomerControl = isEdit ? CustomerEdit : CustomerData;\n        return <CustomerControl \n                    {...this.props.customer} \n                    onSubmit={this.handleOnSubmit}\n                    onSubmitSuccess={this.handleOnSubmitSuccess}\n                    onBack={this.handleOnBack}\n                    isDelele={!!isDelelete}\n                    onDelete={this.handleOnDelete}\n                    />;\n    }\n\n    renderBody = () => (\n        <Route path=\"/customers/:dni/edit\" children={\n            ({ match: isEdit }) => \n                (<Route path=\"/customers/:dni/del\" children={\n                    ({ match: isDelelete }) => (this.renderCustomerControl(isEdit, isDelelete))} />)\n        } /> \n    )\n\n    render() {\n        return (\n            <div>\n                <AppFrame \n                    header={`Cliente ${this.props.dni}`}\n                    body={this.renderBody()}\n                    />\n            </div>\n        )\n    }\n}\n\nCustomerContainer.propTypes = {\n    dni: PropTypes.string.isRequired,\n    customer: PropTypes.object,\n    fetchCustomers: PropTypes.func.isRequired,\n    updateCustomer: PropTypes.func.isRequired,\n    deleteCustomer: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state, props) => ({\n    customer: getCustomerByDni(state, props)\n});\n\nconst mapDispatchToProps = { fetchCustomers, updateCustomer, deleteCustomer }\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(CustomerContainer));\n","import { INSERT_CUSTOMER } from './../constants';\nimport { createAction } from 'redux-actions';\nimport { apiPost } from './../api';\nimport { urlCustomers } from './../api/urls';\n\nexport const insertCustomer = createAction(INSERT_CUSTOMER, \n    customer => apiPost(urlCustomers, customer)());","import React, { Component } from 'react'\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport AppFrame from '../components/AppFrame';\nimport CustomerEdit from '../components/CustomerEdit';\nimport { insertCustomer } from '../actions/insertCustomer';\nimport { SubmissionError } from 'redux-form';\n\nclass NewCustomerContainer extends Component {\n\n    handleOnBack = () => {\n        this.props.history.goBack()\n    }\n\n    handleOnSubmitSuccess = () =>{\n        this.props.history.goBack()\n    }\n\n    handleOnSubmit = values => {\n        return this.props.insertCustomer(values).then(r => {\n            if (r.error) throw new SubmissionError(r.payload)\n        });\n    }\n\n    renderBody = customers => (\n        <CustomerEdit \n            {...this.props.customer} \n            onSubmit={this.handleOnSubmit}\n            onSubmitSuccess={this.handleOnSubmitSuccess}\n            onBack={this.handleOnBack}\n            />\n    )\n\n    render() {\n        return (\n            <div>\n                <AppFrame \n                    header={'Creación de nuevo cliente'}\n                    body={this.renderBody()}\n                    />\n            </div>\n        )\n    }\n}\n\nNewCustomerContainer.propTypes = {};\n\nNewCustomerContainer.defaultProps = {};\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = { insertCustomer }\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NewCustomerContainer));\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport HomeContainer from './containers/HomeContainer';\nimport CustomersContainer from './containers/CustomersContainer';\nimport CustomerContainer from './containers/CustomerContainer';\nimport NewCustomerContainer from './containers/NewCustomerContainer';\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <div className=\"App\">\n                    <Route exact path={`${process.env.PUBLIC_URL}/`} component={HomeContainer}  />\n                    <Route exact path={`${process.env.PUBLIC_URL}/customers`} component={CustomersContainer} />\n                    <Switch>\n                        <Route path={`${process.env.PUBLIC_URL}/customers/new`} component={NewCustomerContainer} />\n                        <Route path={`${process.env.PUBLIC_URL}/customers/:dni`} \n                                render={props => <CustomerContainer dni={props.match.params.dni} />} />\n                    </Switch>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootComponent = (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(rootComponent, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}